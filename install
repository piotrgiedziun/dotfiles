#!/usr/bin/python
# -*- coding: utf-8 -*-
import os
import time


class PackageController:

	SUCCESS_FLAG = " \033[0;32m✔\033[0m "
	ERROR_FLAG = " \033[1;31m✖\033[0m "
	INSTALL_FLAG = " \033[1;33m➜\033[0m "

	def __init__(self):
		self.__packages_all = []
		self.__packages_install = []

	def install(self, title, prompt_message=None, *args, **kwargs):

		def class_wrapper(package):
			package.__title = title
			if prompt_message:
				package.__prompt_message = prompt_message
			else:
				package.__prompt_message = "Do you want to install %s?" % (title,)

			self.__packages_all.append(package)

			return package
		return class_wrapper

	def run(self):
		# check if user want us to install package
		for package in self.__packages_all:

			a = raw_input('\n%s (y/n)\n' % (package.__prompt_message,))

			if a.lower() == "y":
				self.__packages_install.append(package)

		# install all packages
		start_tile = time.time()
		for package in self.__packages_install:
			print '\n%s package %s' % (self.INSTALL_FLAG, package.__title)
			if package() == True:
				print '\t%s%s installed' % (self.SUCCESS_FLAG, package.__title)
			else:
				print '\t%s%s error' % (self.ERROR_FLAG, package.__title)

		print "\ninstallation time: %.2lfs" % (time.time()-start_tile) 

# global PackageController instance
pc = PackageController()

@pc.install("dotfiles", "Do you want to replace dotfiles?")
def dotfiles():
	# copy dotfiles
	files = [".extra",".bash_profile",".bash_prompt",".exports",".aliases",".functions",".bashrc",".vimrc"]
	for copy_file in files:
		os.system("cp %s ~/" % (copy_file, ))

	# copy bin files
	bin_files = ["server",]

	os.system("mkdir ~/.bin 2> /dev/null")
	for copy_file in bin_files:
		os.system("cp .bin/%s ~/.bin" % (copy_file,))

	# validate
	for copy_file in files:
		if not os.path.isfile(os.path.expanduser("~/%s" % (copy_file,))):
			return False

	for copy_file in bin_files:
		if not os.path.isfile(os.path.expanduser("~/.bin/%s" % (copy_file,))):
			return False

	return True

@pc.install("git-completion")
def git_completion():
	os.system("curl -s https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash")

	# validate
	return os.path.isfile(os.path.expanduser("~/.git-completion.bash"))

@pc.install("gitconfig", "Do you want to create gitconfig file?")
def gitconfig():
	email = raw_input('Enter your email address:\n')
	full_name = raw_input('Enter your full name:\n')

	schema_file = open(".gitconfig.schema", "r").read()
	schema_file = schema_file.replace("%EMAIL%", email)
	schema_file = schema_file.replace("%FULL_NAME%", full_name)
	with open(os.path.expanduser("~/.gitconfig"), "w") as f:
		f.write(schema_file)
		f.close()

	return os.path.isfile(os.path.expanduser("~/.gitconfig"))	

@pc.install("virtualenv")
def virtualenv():
	os.system("sudo easy_install pip")
	os.system("pip install --upgrade distribute")
	os.system("sudo pip install virtualenv")
	os.system("sudo pip install virtualenvwrapper")

	return True

@pc.install("directory structure", "Do you want to create ~/Projects and ~/Work dirs?")
def dirs():
	os.system("mkdir ~/Work 2> /dev/null")
	os.system("mkdir ~/Projects 2> /dev/null")
	os.system("sudo chown $(whoami) /User/$(whoami)/Work")
	os.system("sudo chown $(whoami) /User/$(whoami)/Projects")

	return True

@pc.install("iterm2 style")
def iterm2style():
	os.system("curl 'https://raw.githubusercontent.com/altercation/solarized/master/iterm2-colors-solarized/Solarized%20Dark.itermcolors' -o 'Solarized Dark.itermcolors'")
	os.system("open 'Solarized Dark.itermcolors'")

	return True

if __name__ == "__main__":
	pc.run()
	print "reload your console"
