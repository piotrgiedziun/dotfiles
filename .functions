# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$@"
}

# extract given file
# source: https://github.com/ddjfreedom/dotfiles/
function extract () {
  if [ $# -lt 1 ]
  then
    echo 'Usage: extract [file]'
    return 1
  fi
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2) tar xjvf $1 ;;
      *.tar.gz)  tar xvzf $1 ;;
      *.tar)     tar xvf $1  ;;
      *.bz2)     bunzip2 $1  ;;
      *.gz)      gunzip $1   ;;
      *.tbz2|*.tbz)    tar xvjf $1 ;;
      *.tgz)     tar xvzf $1 ;;
      *.rar)     unrar x $1  ;;
      *.zip)     unzip $1    ;;
      *.7z)      7z x $1     ;;
      *)         echo "don't know how to extract '$1'..." ;;
    esac
  else
    echo "'$1' is not a valid file!"
  fi
}

# roll given files
# source: https://github.com/ddjfreedom/dotfiles/
function roll () {
  if [ "$#" -ne 0 ] ; then
    FILE="$1"
    case "$FILE" in
      *.tar.bz2|*.tbz2) shift && tar cvjf "$FILE" $* ;;
      *.tar.gz|*.tgz)   shift && tar cvzf "$FILE" $* ;;
      *.tar)            shift && tar cvf "$FILE" $* ;;
      *.zip)            shift && zip "$FILE" $* ;;
      *.7z)             shift && 7zr a "$FILE" $* ;;
      *)                echo "'$1' cannot be rolled via roll()" ;;
    esac
  else
    echo 'usage: roll [file] [contents]'
    return 1
  fi
}

# copy  to clipboard
function copy() {
 $@ | pbcopy
}

function cdf() { # short for `cdfinder`
    cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@"
    else
        du $arg .[^.]* *
    fi
}

# Create a data URL from a file
function dataurl() {
    local mimeType=$(file -b --mime-type "$1")
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8"
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Start an HTTP server from a directory, optionally specifying the port
# kill if another instance exists
function server() {
    local port="${1:-8000}"
    killp $port "Could not find previous instance."
    python ~/.bin/server "$port"
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
    if [ -t 0 ]; then # argument
        python -mjson.tool <<< "$*" | pygmentize -l javascript
    else # pipe
        python -mjson.tool | pygmentize -l javascript
    fi
}

function killp() {
  local port="${1:-8000}"
  local notFoundMessage="${2:-Nothing found.}"
  if lsof -i:$port -t > /dev/null; then
    ps ww -p $(lsof -i:$port -t)
    echo "Do you want to kill listed processes? (y/n):"
    read choice
    if [ "$choice" ==  "y" ] ; then
      for i in $(lsof -i:$port -t); do
        kill -9 $i 2> /dev/null
      done
    fi
  else
    echo $notFoundMessage
  fi
}

# All the dig info
function digga() {
    dig +nocmd "$1" any +multiline +noall +answer
}
